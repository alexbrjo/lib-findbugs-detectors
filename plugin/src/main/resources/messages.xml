<?xml version="1.0" encoding="UTF-8"?>

<MessageCollection xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:noNamespaceSchemaLocation="messagecollection.xsd">

  <!-- Plugin information -->
  <Plugin>
    <ShortDescription>Demonstration FindBugs plugin</ShortDescription>
    <Details>
      <![CDATA[
      <p>This plugin demonstrates how to write a FindBugs plugin.</p>
      ]]>
    </Details>
  </Plugin>
	
  <!-- Detectors -->
  <Detector class="jenkins.lib.findbugs.detectors.StaticJenkinsInstanceDetector">
    <Details>
      <![CDATA[
        <p>Detects usages of static Jenkins instances in the code</p>
      ]]>
    </Details>
  </Detector>
  <Detector class="jenkins.lib.findbugs.detectors.PipelineIncompatibleBuildStepDetector">
    <Details>
      <![CDATA[
        <p>Detects Build steps that are not compatible with pipeline</p>
      ]]>
    </Details>
  </Detector>
  <Detector class="jenkins.lib.findbugs.detectors.PipelineIncompatibleBuildWrapperDetector">
    <Details>
      <![CDATA[
        <p>Detects Build wrappers that are not compatible with pipeline</p>
      ]]>
    </Details>
  </Detector>
  <Detector class="jenkins.lib.findbugs.detectors.CloseQuietlyInsteadOfLoggingDetector">
    <Details>
      <![CDATA[
        <p>Detects usages of <code>hudson.IOUtils.closeQuietly()</code> and <code>org.apache.commons.io.IOUtils</code></p>
      ]]>
    </Details>
  </Detector>
	
  <!-- Bug patterns -->
  <BugPattern type="STCAL_STATIC_JENKINS_INSTANCE">
    <ShortDescription>Usage of static Jenkins instance</ShortDescription>
    <LongDescription>Usage of static Jenkins instance in field {1}</LongDescription>
    <Details>
      <![CDATA[
        <p>
          Static Jenkins instances are hazardous, because this instance may actually change during the JVM run.
          Example - Unit testing with Jenkins Test harness.
          It is recommended to use <code>jenkins.model.Jenkins.getInstance()</code> in the code.
        </p>
      ]]>
    </Details>
  </BugPattern>
  <BugPattern type="PIPELINE_INCOMPATIBLE_BUILD_STEP">
    <ShortDescription>Pipeline incompatible build step</ShortDescription>
    <LongDescription>Build step is compatible with AbstractProject but not Pipeline</LongDescription>
    <Details>
      <![CDATA[
        <p>
          Your Build step (Builder, Publisher, etc..) will not be able to run on Jenkins Pipelines.
          It is recommended for Build steps to implement <code>jenkins.tasks.SimpleBuildStep</code>.
        </p>
      ]]>
    </Details>
  </BugPattern>
  <BugPattern type="PIPELINE_INCOMPATIBLE_BUILD_WRAPPER">
    <ShortDescription>Pipeline incompatible build wrapper</ShortDescription>
    <LongDescription>Build wrapper is compatible with AbstractProject but not Pipeline</LongDescription>
    <Details>
      <![CDATA[
        <p>
          Your Build wrapper will not be able to run on Jenkins Pipelines.
          It is recommended for BuildWrappers to implement <code>jenkins.tasks.SimpleBuildWrapper</code>.
        </p>
      ]]>
    </Details>
  </BugPattern>
  <BugPattern type="CLOSE_QUIETLY_NO_LOGGING">
    <ShortDescription>Usage of closeQuietly() without logging</ShortDescription>
    <LongDescription>Usage of closeQueitly in method {1}}</LongDescription>
    <Details>
      <![CDATA[
        <p>
          Usage of <code>closeQuietly()</code> suppresses error propagation in the code.
          It may be really important for file operations, where unclosed file handles may cause unpredictable behavior of Jenkins.
          It is recommended to use a try-catch block, which forwards the IO exception.
          It also can be done by TODO:new API method...
        </p>
      ]]>
    </Details>
  </BugPattern>
	
  <!-- Bug codes -->
  <BugCode abbrev="JENKINS">Jenkins-specific bugs</BugCode>
</MessageCollection>
